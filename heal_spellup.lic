settings = CharSettings.to_hash 

@professions  = Hash.new
@wanted     = Array.new
@plist      = Hash.new
dialogs_setting = nil
profession    = nil
pname     = nil

if script.vars[1] =~ /^setup$|^options$/i
  window = window_action = nil
  Gtk.queue {                             
    gtk_checks = Hash.new                           
    
    saveButton = Gtk::Button.new("_Save and Close")
  
    window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
    window.set_title  "GSF Heal and Spellup"  
    window.keep_above = true                    
    window.border_width = 60  
    
    vbox = Gtk::VBox.new(false, 0)      

    prof_bard = Gtk::CheckButton.new("Bard")    
    prof_bard.set_alignment(0.5,0.0) 
    prof_bard.active = settings["Bard"]                 
    gtk_checks["Bard"] = prof_bard
    
    prof_cleric = Gtk::CheckButton.new("Cleric")          
    prof_cleric.active = settings['Cleric']                 
    gtk_checks['Cleric'] = prof_cleric
    
    prof_empath = Gtk::CheckButton.new("Empath")          
    prof_empath.active = settings['Empath']                 
    gtk_checks['Empath'] = prof_empath  
    
    prof_monk = Gtk::CheckButton.new("Monk")          
    prof_monk.active = settings['Monk']                 
    gtk_checks['Monk'] = prof_monk    
    
    prof_paladin = Gtk::CheckButton.new("Paladin")          
    prof_paladin.active = settings['Paladin']                 
    gtk_checks['Paladin'] = prof_paladin
    
    prof_ranger = Gtk::CheckButton.new("Ranger")          
    prof_ranger.active = settings['Ranger']                 
    gtk_checks['Ranger'] = prof_ranger
    
    prof_rogue = Gtk::CheckButton.new("Rogue")          
    prof_rogue.active = settings['Rogue']                 
    gtk_checks['Rogue'] = prof_rogue
    
    prof_sorcerer = Gtk::CheckButton.new("Sorcerer")            
    prof_sorcerer.active = settings['Sorcerer']                   
    gtk_checks['Sorcerer'] = prof_sorcerer
    
    prof_warrior = Gtk::CheckButton.new("Warrior")          
    prof_warrior.active = settings['Warrior']                 
    gtk_checks['Warrior'] = prof_warrior
    
    prof_wizard = Gtk::CheckButton.new("Wizard")            
    prof_wizard.active = settings['Wizard']                   
    gtk_checks['Wizard'] = prof_wizard
      
    tooltips = Gtk::Tooltips.new              
    tooltips.set_tip(prof_bard, "Min Elem / Bard", "")    
    tooltips.set_tip(prof_cleric, "Min Spirit / Major Spirit / Cleric", "")
    tooltips.set_tip(prof_empath, "Min Spirit / Maj Spirit / Empath", "")
    tooltips.set_tip(prof_monk, "Min Spirit / Min Mental ", "")
    tooltips.set_tip(prof_paladin, "Min Spirit / Paladin ", "")
    tooltips.set_tip(prof_ranger, "Min Spirit / Ranger", "")
    tooltips.set_tip(prof_rogue, "Min Spirit / Min Elem ", "")
    tooltips.set_tip(prof_sorcerer, "Min Elem / Min Spirit / Sorcerer ", "")
    tooltips.set_tip(prof_warrior, "Min Spirit / Min Elem ", "")
    tooltips.set_tip(prof_wizard, "Min Elem / Maj Elem / Wizard ", "")
    
    vbox.pack_start(prof_bard,false, true, 0)       
    vbox.pack_start(prof_cleric,false, true, 0)
    vbox.pack_start(prof_empath,false, true, 0)
    vbox.pack_start(prof_monk,false, true, 0)
    vbox.pack_start(prof_paladin,false, true, 0)
    vbox.pack_start(prof_ranger,false, true, 0)
    vbox.pack_start(prof_rogue,false, true, 0)
    vbox.pack_start(prof_sorcerer,false, true, 0)
    vbox.pack_start(prof_warrior,false, true, 0)
    vbox.pack_start(prof_wizard,false, true, 0)
        
    vbox.pack_start(saveButton)
    
    window.add(vbox)
    saveButton.signal_connect('clicked'){                 
      Gtk.queue {                                       
        gtk_checks.each_pair { 
          |number,check| settings[number] = check.active? 
        }
        window_action = :save                   
      }
    }
    window.signal_connect('delete_event') {window_action = :cancel}     
    window.show_all                             
    window.resizable = false                        
  }
  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying
  Gtk.queue { window.destroy }
  Script.self.kill  
elsif script.vars[1] =~ /help|info/
  respond "--------------","Try ;heal_spellup setup","Click the boxes with the professions you want to nudge","--------------"
elsif script.vars[1] =~ /clear/
  settings.clear
  echo "All settings cleared."
  exit
end

squelch_dialogs_off = proc {
  hook_name = 'squelch-dialogs-off'
  hook_proc = proc { |s|
    if s =~ /<prompt/
      DownstreamHook.remove(hook_name)
      nil
    elsif s =~ /You have disabled viewing of most special panels and dialogs/
      DownstreamHook.remove(hook_name)
      # dialogs turned off
      dialogs_setting="off"
      nil
    else
      s
    end
  }
  
  DownstreamHook.add(hook_name, hook_proc)              
  silence_me unless undo_silence = silence_me
  put 'flags dialogs off'
  silence_me if undo_silence
}

squelched_profile = proc {
  return if pname==nil
  started = false
  hook_name = 'squelch-profile'
  hook_proc = proc { |s|
    if started
      if s =~ /<prompt/
        DownstreamHook.remove(hook_name)
        (profession = "Hidden") unless (profession)
      elsif s =~ /Profession: (\w+).*/
        profession = $1
      end
      nil
    elsif s =~ /PERSONAL INFORMATION/
      started = true
      nil
    elsif s =~ /Player .* not found.  Need help?/
      DownstreamHook.remove(hook_name)
      profession = "Gone"
      nil
    else
      s
    end
  }
  DownstreamHook.add(hook_name, hook_proc)
  silence_me unless undo_silence = silence_me
  put 'profile ' + pname
  silence_me if undo_silence
}

def get_healed
  30.times {
     if XMLData.injuries.any? { |a,h| h['wound'] > 0 } and checkpcs.include?('Tyrean')
      sleep 1
     else
      break
     end
  }
  if XMLData.injuries.any? { |a,h| h['wound'] > 0 } 
    if checkpcs.include?('Tyrean')
      fput "slap Tyrean"
    end
  end
end

def get_spells(person)
  success = nil
  waitrt?
  fput "nudge #{person}"
  success = matchtimeout 10, "sending spell info"
  if success != false
    sleep(5)
  end
  return success
end
  
def cycle_casters 
  @wanted.compact!
  @wanted.each do |x|
    circle = x.to_s
    if @plist[circle]
        index = 0 
        target = @plist[circle]
        while get_spells(target[index]) == false && target.size > index + 1
          index += 1
        end
    end
  end
  sleep(15)
end

squelch_dialogs_off.call
GameObj.pcs.each { |p| 
    pname = p.to_s
    squelched_profile.call
    wait_until {profession}
    next if profession == "Gone"
    if @plist[profession]
      @plist[profession]=@plist[profession].push(pname)
    else
      @plist[profession] = []
      @plist[profession]=@plist[profession].push(pname)
    end
    profession=nil
}

settings.each_pair { |prof,active| 
  if active
    @wanted.push(prof.to_s)
  end 
  
  
}
if Char.name != "Tyrean"
  get_healed
end
cycle_casters
sleep 10
get_healed
