require 'fileutils'

=begin

  generic checkbox menu script

   authors: Tykus
      game: Gemstone
      tags: GTK2, GUI, menu
   version: 0.1
  requried: Lich >= 4.6.54

  changelog:
    0.1 (20-05-29):
      Initial creation of script 
  
  notes:
    This script creates a checkbox menu. Add items to the options_list to meet your needs. It will create a UserVars hash based on the name your save the script. 
=end
## this is where you will add your options. The first value is the label next to the checkbox, the second is the variable name you want to use and the last is the tooltip message
options_list = {"Item 1" => [:item1, "ToolTip 1"] ,
                "Item 2" => [:item2, "ToolTip 2"] ,
                "Item 3" => [:item3, "ToolTip 3"] ,
                "Item 4" => [:item4, "ToolTip 4"] ,
                }
                
## this get the file name of the script and creates a UserVar with that name. It also creates the hash with the variables you created above                
lichname = File.basename(__FILE__).to_s
if UserVars.send(lichname) == nil
  UserVars.add(lichname, {})
  varsname = Hash.new
  options_list.each {|key,value|
    varsname[value[0]] = false
  }
else
  varsname = UserVars.send(lichname)
end                  
               
               
##this part creates the actual  window               
checkboxes = Hash.new
tiplist = Hash.new
box_num = 0
window = window_action = nil
Gtk.queue {                             
  gtk_checks = Hash.new                           
  saveButton = Gtk::Button.new("_Save and Close")  ## creates and labels the save button
  window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
  window.set_title  "#{lichname}"  ## sets the window title
  window.keep_above = true                    
  window.border_width = 125
  vbox = Gtk::VBox.new(false, 0)    ## vbox means vertical box, in this case the checkboxes will be up and down in a line
    options_list.each_pair { |key,val|
      box_num += 1
      checkboxes[box_num] = Gtk::CheckButton.new(key) ## creates the button object and names it based on your list
      tiplist[box_num] = val[1]  ## matches the tooltip to the button
      checkboxes[box_num].set_alignment(0.5,0.0) 
      checkboxes[box_num].active = varsname[val[0]] ## checks or unchecks the box based on previous settings or false if first use
      gtk_checks[val[0]] = checkboxes[box_num]
    }
  checkboxes.each_pair { |key,val|  ## this actually put the checkbox on the window. everything above just setup the parameters for this step
    vbox.pack_start(val,false, true, 0)      
  } 
  tooltips = Gtk::Tooltips.new              
  tiplist.each_pair { |key,val|  ## this part pairs the tooltip with the checkbox
    tooltips.set_tip(checkboxes[key],val,"")  
  }

  vbox.pack_start(saveButton)
  window.add(vbox)
  saveButton.signal_connect('clicked'){              ## this saves everything when the save button is clicked  
    Gtk.queue {                                       
      gtk_checks.each_pair { |number,check|
        varsname[number] = check.active?
      }
      UserVars.change(lichname,varsname)
      window_action = :save                   
    }
  }

  window.signal_connect('delete_event') {window_action = :cancel}     ## this last part has to do with closing the window correctly 
  window.show_all                             
  window.resizable = false                        
}
before_dying { Gtk.queue { window.destroy }}
wait_while { window_action.nil? }
undo_before_dying
Gtk.queue { window.destroy }
Script.self.kill 