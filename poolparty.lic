# Box pool script
# THANK YOU TYKUS!!!!!
#
# This script will, if you have boxes to drop off, go to the locksmith pool, deposit boxes into the pool, then loot any you have waiting for you
# Otherwise it exits
#
# I have the script set to withdraw 10k from the bank before hitting the pool...Hopefully this isn't too much
#
#
# author: Glaves
# tags: locksmith, picker, pool, locksmith pool, picking, boxes, loot, locksmith, locksmithing, rogue
# version: 1.14
#
# **Change Log**
# 1.00 - intial release
# 1.01 - Added RR waste bin
# 1.02 - added Icemule (Boss) NPC
# 1.03 - Added plinite support
# 1.04 - Added very basic disk logic (you still need a box in your inventory to trigger the intial deposit, but it will check your disk while at the pool)
# 1.05 - Removed the need for Foreach, added better disk logic, fixed wastebins
# 1.06 - Added Solhaven NPC
# 1.07 - Fixed wastebin in Solhaven, added plucking for plinites
# 1.08 - Updated Plinite handling logic 
# 1.09 - Should have the RT issue fixed - Thank you Lostranger
# 1.10 - Updated the disk logic - Reverted change to RT back to a dumber hard pause
# 1.11 - Added the ability to only run the looting portion of the script ;PoolParty loot
# 1.12 - Props to Licel - Added a help menu, you can now set your tip ;poolparty tip ## - LICEL!
# 1.13 - Fixed syntax with new Tip setting feature
# 1.14 - Added a check to make sure you have your lootsack set
#
#
# HUGE Shout out to Tykus for helping me debug a bunch of stuff and showing me a couple tricks with this one
# It would've taken me forever without him helping me out.
#
# If you find any bugs please report them to Glaves#8902 on discord


loot_sack = UserVars.lootsack
unless loot_sack
	puts "#{monsterbold_start} ******WARNING UserVars.lootsack NOT DEFINED ****** #{monsterbold_end}"
	echo " "
    echo    "Please set your loot sack with a",
            "command like:",
            "    ;vars set lootsack=backpack",
            "",
            "Use only the noun (no \"my\" or adjectives).",
            "",
            "This will only work with containers you are",
            "wearing or holding."
    
    exit
end
   
if script.vars[0].nil? and CharSettings['tip'].nil?
	echo "Defaulting to a 25% tip amount. Please see #{$clean_lich_char}#{script.name} help"
	CharSettings['tip']=25
end

if script.vars[1]=='help'
	echo "Thank you for your interest in #{$clean_lich_char}#{script.name}"

  echo "This script will, if you have boxes to drop off, go to the locksmith pool, deposit boxes into the pool, then loot any you have waiting for you, then return you to where you ran it from. Otherwise it exits."
	echo "Usage: "
	echo "#{$clean_lich_char}#{script.name} with no arguments to run."
	echo "#{$clean_lich_char}#{script.name} help to get this menu."
  echo "#{$clean_lich_char}#{script.name} TIP 25 to set tip percentage to 25%."
	exit
elsif script.vars[1]=="tip"
	if /\A\d+\z/.match(script.vars[2])#is an integer
		echo "Setting the tip amount to #{script.vars[2]} percent."
		CharSettings['tip']=script.vars[2].to_i;
	else
		echo "Must set tip percentage to an integer (25, 30, 50, etc)."
	end
end

if( script.vars[1].nil? )
start_room = Room.current
box_inventory = Array.new
GameObj.inv.each {|c|
  boxes = c.contents.find_all{ |b| b.type == "box" || b.noun == "plinite"}
  if boxes.length > 0
    box_inventory.concat(boxes)
  end
}

disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
unless disk
    respond "** Waiting to see if you have a disk **"
    pause 5
    disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
end

fput "look in #{Char.name} disk" if disk
disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
disk_contents = GameObj[disk.id].contents.find_all { |b| b.type == "box" || b.noun == "plinite"}
if box_inventory.length > 0 || disk_contents.length > 0
  fput "stow all"
  Script.run('go2','bank')
  sleep 1
  fput "withdraw 10000 silver"
  Script.run('go2','locksmith pool')

  npc = GameObj.npcs.find { |npc| npc.noun =~ /(G|g)nome|(W|w)oman|(A|a)ttendant|(M|m)erchant|(W|w)orker|(B|b)oss|(J|j)ahck/ }

  box_inventory.each {|b|
multifput("get ##{b.id}", "give #{npc} #{CharSettings['tip']} percent", "give #{npc} #{CharSettings['tip']} percent")
}

disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
unless disk
    respond "** Waiting to see if you have a disk **"
    pause 5
    disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
end

fput "look in #{Char.name} disk" if disk
    disk_contents.each {|b|
multifput("get ##{b.id}", "give #{npc} #{CharSettings['tip']} percent", "give #{npc} #{CharSettings['tip']} percent")
}
else
  respond "No boxes in inventory ...... exiting"
  exit
 end

bin = nil
trash_list = ["barrel","bin","wastebasket","trashcan","bucket","wooden crate","iron barrel"]
trash_list.each {|x|
  if Room.current.description.to_s =~ /#{x}/
    bin = x
    break
  end
}
  if bin == nil
    bin_obj = GameObj.loot.find{|t| t.name =~ /barrel|bin|wastebasket|trashcan|bucket/}
    bin = bin_obj.noun
  end

loop{

  fput "ask #{npc} about return"

  sleep 1

  if GameObj.right_hand.type == "box" || GameObj.right_hand.noun == "plinite"
    box = GameObj.right_hand.id
    fput "open ##{box}" unless GameObj.right_hand.noun == "plinite"
		if GameObj.right_hand.noun == "plinite"
			fput "pluck ##{box}"
		end
	waitrt?
    fput "get coin from ##{box}" unless GameObj.right_hand.noun == "core"
	pause 4
    waitrt?
    fput "empty ##{box} in my #{UserVars.lootsack}" unless GameObj.right_hand.noun == "core"
    pause 4
	waitrt?
    fput "put ##{box} in #{bin}" unless GameObj.right_hand.noun == "core"
		if GameObj.right_hand.noun == "core" || GameObj.right_hand.noun == "plinite"
			fput "put #{GameObj.right_hand} in my #{UserVars.lootsack}"
		elsif GameObj.left_hand.noun == "core" || GameObj.left_hand.noun == "plinite"
			fput "put #{GameObj.left_hand} in my #{UserVars.lootsack}"
		end
  elsif  GameObj.right_hand.type != "box" && GameObj.right_hand.noun != "core" && GameObj.right_hand.noun != "plinite"
    Script.run('go2', start_room.id.to_s)
    break
  end
  }

 elsif( script.vars[1] =~ /loot/i )
	start_room = Room.current

  Script.run('go2','locksmith pool')

  npc = GameObj.npcs.find { |npc| npc.noun =~ /(G|g)nome|(W|w)oman|(A|a)ttendant|(M|m)erchant|(W|w)orker|(B|b)oss|(J|j)ahck/ }


bin = nil
trash_list = ["barrel","bin","wastebasket","trashcan","bucket","wooden crate","iron barrel"]
trash_list.each {|x|
  if Room.current.description.to_s =~ /#{x}/
    bin = x
    break
  end
}
  if bin == nil
    bin_obj = GameObj.loot.find{|t| t.name =~ /barrel|bin|wastebasket|trashcan|bucket/}
    bin = bin_obj.noun
  end

loop{

  fput "ask #{npc} about return"

  sleep 1

  if GameObj.right_hand.type == "box" || GameObj.right_hand.noun == "plinite"
    box = GameObj.right_hand.id
    fput "open ##{box}" unless GameObj.right_hand.noun == "plinite"
		if GameObj.right_hand.noun == "plinite"
			fput "pluck ##{box}"
		end
	waitrt?
    fput "get coin from ##{box}" unless GameObj.right_hand.noun == "core"
	pause 4
    waitrt?
    fput "empty ##{box} in my #{UserVars.lootsack}" unless GameObj.right_hand.noun == "core"
    pause 4
	waitrt?
    fput "put ##{box} in #{bin}" unless GameObj.right_hand.noun == "core"
		if GameObj.right_hand.noun == "core" || GameObj.right_hand.noun == "plinite"
			fput "put #{GameObj.right_hand} in my #{UserVars.lootsack}"
		elsif GameObj.left_hand.noun == "core" || GameObj.left_hand.noun == "plinite"
			fput "put #{GameObj.left_hand} in my #{UserVars.lootsack}"
		end
  elsif  GameObj.right_hand.type != "box" && GameObj.right_hand.noun != "core" && GameObj.right_hand.noun != "plinite"
    Script.run('go2', start_room.id.to_s)
    break
  end
  }
  end
